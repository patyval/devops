pipeline {
    agent any

    environment {
        REGISTRY_PASSWORD_1 = credentials('REGISTRY_PASSWORD_1')
        group='rg-devops-sura-pvaldezo1-dev'
        location='southcentralus'
        registry='crdevopssurapvaldezo1dev'
        registry_url='https://crdevopssurapvaldezo1dev.azurecr.io'
        skuRegistry='Basic'
        plan='plan-devops-sura-pvaldezo1-dev'
        app='app-devops-sura-starter-pvaldezo1-dev'
        image='crdevopssurapvaldezo1dev.azurecr.io/starter:latest'
        ToA = credentials('SonarQubeToA')
    }

    stages {
        stage('Checkout') { 
            steps {
                // 
                echo 'Checking out'
                sh 'sudo apt-get update -y'
                sh 'curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash'
                nodejs(nodeJSInstallationName: 'Node 12.22.3') {
                    sh 'rm -rf fe-devops-sura-pvaldezo1-dev'
                    sh 'npx gatsby new fe-devops-sura-pvaldezo1-dev https://github.com/Evaluates2/Gatsby-Starter-TypeScript-Redux-TDD-BDD'
                }
            }
        }
    stage('SCM') {
        checkout scm
        }
    stage('SonarQube Analysis') {
          steps {
                nodejs(nodeJSInstallationName: 'Node 12.22.3') {
                    sh '''                    
                    
                    npx sonar-scanner \
                    -Dsonar.host.url=http://vm-devops-sura-sonarqube-pvaldezo1-dev.southcentralus.cloudapp.azure.com/ \
                    -Dsonar.login=$ToA \
                    -Dsonar.sources=./fe-devops-sura-pvaldezo1-dev \
                    -Dsonar.exclusions=./fe-devops-sura-pvaldezo1-dev/node_modules \
                    -Dsonar.projectName=devops \
                    -Dsonar.projectKey=devops                    
                    '''                
                 }
            }
        }
     stage('Build') { 
            steps {
                // 
                echo 'Building'
                nodejs(nodeJSInstallationName: 'Node 12.22.3') {
                    sh 'npm run build --prefix fe-devops-sura-pvaldezo1-dev'
                }
            }
        }
      stage('Test') { 
            steps {
                // 
                echo 'Testing'
                nodejs(nodeJSInstallationName: 'Node 12.22.3') {
                    sh 'npm run test-once --prefix fe-devops-sura-pvaldezo1-dev'
                    sh 'npm run lint --prefix fe-devops-sura-pvaldezo1-dev'
                }
            }
        }
      stage('Delivery') { 
            steps {
                // 
                echo 'Delivery'
                withCredentials([azureServicePrincipal('4d54796c-c6c7-4c36-a288-dd18bf5b6b9d')]) {
                    sh 'az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET -t $AZURE_TENANT_ID'
                    sh '''
cat <<-EOF> fe-devops-sura-pvaldezo1-dev/Dockerfile
FROM nginx:stable-alpine
COPY public /usr/share/nginx/html
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
EOF'''
                    sh 'docker build -f fe-devops-sura-pvaldezo1-dev/Dockerfile -t $image fe-devops-sura-pvaldezo1-dev'
                    sh 'docker login $registry_url -u crdevopssurapvaldezo1dev -p $REGISTRY_PASSWORD_1'
                    sh 'docker push $image'
                }
            }
        }
      stage('Deploy') { 
            steps {
                // 
                echo 'Deploying'
                sh 'az configure --defaults group=$group location=$location'
                sh 'az webapp create --plan $plan --name $app --deployment-container-image-name $image'
                sh 'az webapp config container set --name $app --docker-custom-image-name $image --docker-registry-server-url $registry_url'    
            }
        }
    }
}
